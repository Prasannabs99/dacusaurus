import {
  __commonJS
} from "./chunk-AUZ3RYOM.js";

// node_modules/title/lib/lower-case.js
var require_lower_case = __commonJS({
  "node_modules/title/lib/lower-case.js"(exports, module) {
    var conjunctions = [
      "for",
      "and",
      "nor",
      "but",
      "or",
      "yet",
      "so"
    ];
    var articles = [
      "a",
      "an",
      "the"
    ];
    var prepositions = [
      "aboard",
      "about",
      "above",
      "across",
      "after",
      "against",
      "along",
      "amid",
      "among",
      "anti",
      "around",
      "as",
      "at",
      "before",
      "behind",
      "below",
      "beneath",
      "beside",
      "besides",
      "between",
      "beyond",
      "but",
      "by",
      "concerning",
      "considering",
      "despite",
      "down",
      "during",
      "except",
      "excepting",
      "excluding",
      "following",
      "for",
      "from",
      "in",
      "inside",
      "into",
      "like",
      "minus",
      "near",
      "of",
      "off",
      "on",
      "onto",
      "opposite",
      "over",
      "past",
      "per",
      "plus",
      "regarding",
      "round",
      "save",
      "since",
      "than",
      "through",
      "to",
      "toward",
      "towards",
      "under",
      "underneath",
      "unlike",
      "until",
      "up",
      "upon",
      "versus",
      "via",
      "with",
      "within",
      "without"
    ];
    module.exports = /* @__PURE__ */ new Set([
      ...conjunctions,
      ...articles,
      ...prepositions
    ]);
  }
});

// node_modules/title/lib/specials.js
var require_specials = __commonJS({
  "node_modules/title/lib/specials.js"(exports, module) {
    var intended = [
      "ZEIT",
      "ZEIT Inc.",
      "Vercel",
      "Vercel Inc.",
      "CLI",
      "API",
      "HTTP",
      "HTTPS",
      "JSX",
      "DNS",
      "URL",
      "now.sh",
      "now.json",
      "vercel.app",
      "vercel.json",
      "CI",
      "CD",
      "CDN",
      "package.json",
      "package.lock",
      "yarn.lock",
      "GitHub",
      "GitLab",
      "CSS",
      "Sass",
      "JS",
      "JavaScript",
      "TypeScript",
      "HTML",
      "WordPress",
      "Next.js",
      "Node.js",
      "Webpack",
      "Docker",
      "Bash",
      "Kubernetes",
      "SWR",
      "TinaCMS",
      "UI",
      "UX",
      "TS",
      "TSX",
      "iPhone",
      "iPad",
      "watchOS",
      "iOS",
      "iPadOS",
      "macOS",
      "PHP",
      "composer.json",
      "composer.lock",
      "CMS",
      "SQL",
      "C",
      "C#",
      "GraphQL",
      "GraphiQL",
      "JWT",
      "JWTs"
    ];
    module.exports = intended;
  }
});

// node_modules/title/lib/index.js
var require_lib = __commonJS({
  "node_modules/title/lib/index.js"(exports, module) {
    var lowerCase = require_lower_case();
    var specials = require_specials();
    var word = `[^\\s'’\\(\\)!?;:"-]`;
    var regex = new RegExp(`(?:(?:(\\s?(?:^|[.\\(\\)!?;:"-])\\s*)(${word}))|(${word}))(${word}*[’']*${word}*)`, "g");
    var convertToRegExp = (specials2) => specials2.map((s) => [new RegExp(`\\b${s}\\b`, "gi"), s]);
    function parseMatch(match) {
      const firstCharacter = match[0];
      if (/\s/.test(firstCharacter)) {
        return match.slice(1);
      }
      if (/[\(\)]/.test(firstCharacter)) {
        return null;
      }
      return match;
    }
    module.exports = (str, options = {}) => {
      str = str.toLowerCase().replace(regex, (m, lead = "", forced, lower, rest, offset, string) => {
        const isLastWord = m.length + offset >= string.length;
        const parsedMatch = parseMatch(m);
        if (!parsedMatch) {
          return m;
        }
        if (!forced) {
          const fullLower = lower + rest;
          if (lowerCase.has(fullLower) && !isLastWord) {
            return parsedMatch;
          }
        }
        return lead + (lower || forced).toUpperCase() + rest;
      });
      const customSpecials = options.special || [];
      const replace = [...specials, ...customSpecials];
      const replaceRegExp = convertToRegExp(replace);
      replaceRegExp.forEach(([pattern, s]) => {
        str = str.replace(pattern, s);
      });
      return str;
    };
  }
});
export default require_lib();
//# sourceMappingURL=title.js.map
