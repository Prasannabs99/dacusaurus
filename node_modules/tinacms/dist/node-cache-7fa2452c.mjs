const makeCacheDir = async (dir, fs) => {
  const path = await import("./__vite-browser-external-d06ac358.mjs");
  const os = await import("./__vite-browser-external-d06ac358.mjs");
  const parts = dir.split(path.sep).filter(Boolean);
  let cacheDir = dir;
  if (!fs.existsSync(path.join(path.sep, parts[0]))) {
    cacheDir = path.join(os.tmpdir(), parts[parts.length - 1]);
  }
  fs.mkdirSync(cacheDir, { recursive: true });
  return cacheDir;
};
const NodeCache = async (dir) => {
  const fs = await import("./__vite-browser-external-d06ac358.mjs");
  const { createHash } = await import("./__vite-browser-external-d06ac358.mjs");
  const cacheDir = await makeCacheDir(dir, fs);
  return {
    makeKey: (key) => {
      const input = key && key instanceof Object ? JSON.stringify(key) : key || "";
      return createHash("sha256").update(input).digest("hex");
    },
    get: async (key) => {
      try {
        const data = await fs.promises.readFile(`${cacheDir}/${key}`, "utf-8");
        return JSON.parse(data);
      } catch (e) {
        if (e.code === "ENOENT") {
          return void 0;
        }
        throw e;
      }
    },
    set: async (key, value) => {
      await fs.promises.writeFile(
        `${cacheDir}/${key}`,
        JSON.stringify(value),
        "utf-8"
      );
    }
  };
};
export {
  NodeCache
};
